    ///IN THE NAME OF ALLAH
    #include<bits/stdc++.h>
    using namespace std;
    const int maxn = 200000;
    int n,T,ind;
    char st[30];
    int vec[maxn];
    int value[4 * maxn];
    int Arr[4 * maxn];
    int conv(){
        int len = strlen(st);
        for(int i=0;i<len;i++){
            int s = 0 ;
            while(isdigit(st[i])&&i<len) s = s*10 + st[i]-'0' , i++ ;
            if(s) vec[ind++]=s-1;
        }
    }
    void init(int root, int left, int right){
      if (left == right) value[root] = Arr[left];
      else {
        init(2 * root + 1, left, (left + right) / 2);
        init(2 * root + 2, (left + right) / 2 + 1, right);
        value[root] = min(value[2 * root + 1], value[2 * root + 2]);
      }
    }
    int query(int a, int b, int root, int left, int right) {
      if (a > right || b < left)
        return 1e9;
      if (a <= left && right <= b)
        return value[root];

       return min(query(a, b, root * 2 + 1, left, (left + right) / 2),
        query(a, b, root * 2 + 2, (left + right) / 2 + 1, right));
    }
    void modify(int index ,int root, int left, int right){
       if(left>index || right < index) return ;
      if (left == right && left == index){
        value[root] = T;
        return;
      }else if(left==right){
        return;
      }
      modify(index , 2 * root + 1, left, (left + right) / 2);
      modify(index , 2 * root + 2, (left + right) / 2 + 1, right);
      value[root] = min(value[2 * root + 1], value[2 * root + 2]);
    }
    int main() {
      int n,q;
      scanf("%d %d",&n,&q);
      for(int i=0;i<n;i++)
       scanf("%d",&Arr[i]);
       init(0,0,n);
      while(q--){
         int x,cnt=0;
         char Temp;
         scanf("%s",st);
         ind =0;
         conv();
         int T2= Arr[vec[0]];
         if(st[0]=='s'){
             for(int i=0;i<ind-1;i++){
                  T=Arr[vec[i+1]];

                  modify(vec[i],0,0,n);
                  Arr[vec[i]]=T;
             }
             T=T2;
             modify(vec[ind-1],0,0,n);
             Arr[vec[ind-1]]=T2;
         }else printf("%d\n",query(vec[0],vec[1],0,0,n));
      }
    }
